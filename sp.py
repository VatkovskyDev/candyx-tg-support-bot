import json
import logging
import time
import uuid
from datetime import datetime, timedelta
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
import g4f

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SupportBot:
    VERSION = "0.0.2"
    CODE_NAME = "NOVA"

    MESSAGES = {
        "welcome": "üòò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n‚ï∞‚îÄ> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ.",
        "unknown": "‚ñ∏ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.",
        "ai_on": "ü§ñ –ò–ò –∑–∞–ø—É—â–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.",
        "ai_off": "‚ú± –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.",
        "ask_question": "‚¶ø –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É.\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ.",
        "question_sent": "‚ñ∏ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢–æ–∫–µ–Ω: {token}\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
        "question_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.",
        "report_staff": "‚¶ø –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª.\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ.",
        "report_bug": "‚¶ø –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–¥–æ—á–µ—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "cancel": "‚ñ∏ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "admin_denied": "‚ï∞‚îÄ> –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
        "admin_panel": "‚ñ™Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        "manage_agents": "‚óæ‚óæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.",
        "ban_user": "‚¶Ø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏.\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
        "broadcast": "‚óæ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        "add_agent": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ ID –∏ —Ä–æ–ª—å: '123456789 agent/admin/manager'.",
        "remove_agent": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏.",
        "ban": "‚óæ –£–∫–∞–∂–∏—Ç–µ ID –∏ —á–∞—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: '123456789 24'.",
        "unban": "‚ú± –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
        "no_input": "‚ñ∏ –í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ.",
        "report_staff_sent": "‚ñ∏ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        "report_bug_sent": "‚ñ∏ –ù–µ–¥–æ—á–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ!",
        "report_staff_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.",
        "report_bug_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–æ—á–µ—Ç–∞.",
        "broadcast_sent": "‚¶Ø –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "broadcast_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        "self_agent": "‚óæ –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è.",
        "already_agent": "‚ï∞‚îÄ> @{agent_id} —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
        "agent_added": "‚ï∞‚îÄ> {role} @{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.",
        "self_remove": "‚ñ∏ –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–æ–ª—å —Å —Å–µ–±—è.",
        "agent_removed": "‚ï∞‚îÄ> @{agent_id} —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ {role}.",
        "not_agent": "‚¶Ø @{agent_id} –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
        "invalid_format": "‚ñ∏ –§–æ—Ä–º–∞—Ç: {text}. –ü—Ä–∏–º–µ—Ä: '{example}'.",
        "invalid_id": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
        "self_ban": "‚ï∞‚îÄ> –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
        "agent_ban": "‚ï∞‚îÄ> –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
        "banned": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê:\n‚ï∞‚îÄ> @{target_id}\n‚ï∞‚îÄ> –°—Ä–æ–∫: {hours} —á.",
        "banned_notify": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê:\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ.\n‚ï∞‚îÄ> –°—Ä–æ–∫: {hours} —á.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –°–ï–û –∏–ª–∏ –°–û–û.",
        "unbanned": "‚óæ @{target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "unbanned_notify": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê:\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: —Ä–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.",
        "not_banned": "‚ñ∏ @{target_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "banned_user": "‚ñ∏ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
        "chat_unavailable": "‚¶Ø –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –°–û–û.",
        "error": "‚óæ –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "get_agents": "‚ñ∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n{agents_list}",
        "version": "‚¶Ø –í–µ—Ä—Å–∏—è: {version} ({code_name})",
        "stats": "‚ñ∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–°–µ—Å—Å–∏–π: {sessions}\n–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {bans}",
        "message_too_long": "‚óæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 4096).",
        "permission_denied": "‚óæ –†–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.",
        "token_success": "‚ñ∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã {role}.",
        "token_invalid": "‚ñ∏ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        "token_already_used": "‚ñ∏ –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
        "response_menu": "‚ñ∏ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
        "no_pending_questions": "‚ñ∏ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        "select_question": "‚ñ∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
        "enter_response": "‚ñ∏ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º {token}:\n–í–æ–ø—Ä–æ—Å: {question}",
        "response_sent": "‚ñ∏ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_id}."
    }

    PREFIXES = {
        "staff": "üìù –ù–ê–†–£–®–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ê",
        "bug": "‚ö†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
        "question": "‚úâÔ∏è –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
        "broadcast": "üì¢ –û–ë–©–ï–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï",
        "ban": "üîí –ù–ê–õ–û–ñ–ï–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò",
        "unban": "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê",
        "add_agent": "üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê",
        "remove_agent": "üóë –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê"
    }

    def __init__(self, token, admin_chat):
        self.token = token
        self.admin_chat = admin_chat
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.rules = self.load_file('candyxpe_rules.txt', "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", text=True)
        self.agents = self.load_file('candyxpe_agents.json', {"7583895254": {"role": "manager"}})
        self.tokens = self.load_file('tokens.json', {})
        self.banned = {}
        self.ai_users = set()
        self.actions = {}
        self.contexts = {}
        self.stats = {"users": set(), "messages": 0}
        self.spam = {}
        self.pending_questions = {}
        self.prompt = (
            "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ —Ç–µ–º–∞–º –ø—Ä–æ–µ–∫—Ç–∞: —Ç–µ—Ö–≤–æ–ø—Ä–æ—Å—ã, –≥–µ–π–º–ø–ª–µ–π, –±–∞–≥–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞:\n{rules}\n\n"
            "–¢–æ–Ω: –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –ø—É–Ω–∫—Ç—ã –ø—Ä–∞–≤–∏–ª, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å. "
            "–ù–µ –¥–∞–≤–∞–π –∫–æ–¥ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–Ω–µ CandyxPE. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω, –æ—Ç–≤–µ—Ç—å: '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É.'\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n- –ë–∞–≥: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —É–∫–∞–∂–∏—Ç–µ ID.'\n- –ü—Ä–∞–≤–∏–ª–∞: '–ü—É–Ω–∫—Ç 3.1: [—Ü–∏—Ç–∞—Ç–∞].'"
        )
        self.setup_handlers()

    def load_file(self, path, default, text=False):
        if not os.path.exists(path):
            self.save_file(path, default)
        with open(path, 'r', encoding='utf-8') as f:
            return f.read().strip() if text else json.load(f)

    def save_file(self, path, data):
        with open(path, 'w', encoding='utf-8') as f:
            if isinstance(data, str):
                f.write(data)
            else:
                json.dump(data, f, ensure_ascii=False, indent=2)

    async def send_message(self, user, key, keyboard=None, info=None):
        try:
            msg = self.MESSAGES.get(key, key) or "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if info:
                msg = msg.format(**info)
            await self.bot.send_message(
                chat_id=user,
                text=msg,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"Message sent to user {user}: {msg[:50]}")
        except Exception as e:
            logger.error(f"Error sending message to user {user}: {e}")
            await self.bot.send_message(
                chat_id=user,
                text=self.MESSAGES["error"],
                reply_markup=self.get_keyboard("main", user)
            )

    def get_keyboard(self, mode, user=None):
        keyboards = {
            "main": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü§ñÔ∏è –ü–û–î–î–ï–†–ñ–ö–ê –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê"), KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –í–û–ü–†–û–°")],
                    [KeyboardButton(text="üìù –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ"), KeyboardButton(text="‚ö†Ô∏è –í–û–ó–ù–ò–ö–õ–ê –ù–ï–ü–û–õ–ê–î–ö–ê")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "ai": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîÑ –ó–ê–í–ï–†–®–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "action": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîÑ –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –û–ü–ï–†–ê–¶–ò–Æ")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "admin": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üßë‚Äçüè´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–¢–ê–¢–û–ú"), KeyboardButton(text="‚õè –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")],
                    [KeyboardButton(text="üì¢ –ú–ê–°–°–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï"), KeyboardButton(text="üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "manage_agents": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê"), KeyboardButton(text="üóë –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê")],
                    [KeyboardButton(text="üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "ban_user": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü"), KeyboardButton(text="üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê")],
                    [KeyboardButton(text="üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            "response": ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì¨ –û–¢–í–ï–¢–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ"), KeyboardButton(text="üìã –°–ü–ò–°–û–ö –í–û–ü–†–û–°–û–í")],
                    [KeyboardButton(text="üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            )
        }
        keyboard = keyboards.get(mode, keyboards["main"])
        if user and mode == "main" and str(user) in self.agents:
            keyboard.keyboard.insert(0, [KeyboardButton(text="üõ† –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø")])
            keyboard.keyboard.insert(1, [KeyboardButton(text="üì¨ –ú–ï–ù–Æ –û–¢–í–ï–¢–û–í")])
        return keyboard

    async def get_question_keyboard(self):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for token, data in self.pending_questions.items():
            button_text = f"–í–æ–ø—Ä–æ—Å (–¢–æ–∫–µ–Ω: {token[:8]}...)"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=button_text, callback_data=f"answer_{token}")
            ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üîÑ –í–ï–†–ù–£–¢–¨–°–Ø", callback_data="back_to_response")
        ])
        return keyboard

    async def send_admin(self, user, message, action, token=None):
        prefix = self.PREFIXES.get(action, "‚óæ –°–û–û–ë–©–ï–ù–ò–ï")
        try:
            user_info = await self.bot.get_chat(user)
            info = f"\nüë§ @{user_info.username or user_info.id}\n‚óæ ID: {user}\n‚ï∞‚îÄ> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
        except Exception:
            info = f"\nüë§ @{user}\n‚óæ ID: {user}\n‚ï∞‚îÄ> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
        if token:
            info += f"\n‚óæ –¢–æ–∫–µ–Ω: {token}"
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat,
                text=f"{prefix}{info}\n\n{message}",
                parse_mode="HTML"
            )
            logger.info(f"Notification sent to admin chat {self.admin_chat} (type: {action}): {message[:50]}")
            for agent_id in self.agents:
                if int(agent_id) in self.stats["users"]:
                    try:
                        await self.bot.send_message(
                            chat_id=int(agent_id),
                            text=f"{prefix}{info}\n\n{message}",
                            parse_mode="HTML",
                            reply_markup=await self.get_question_keyboard()
                        )
                        logger.info(f"Notification sent to agent {agent_id} (type: {action}): {message[:50]}")
                        await asyncio.sleep(0.1)
                    except Exception as e:
                        logger.error(f"Error sending notification to agent {agent_id}: {e}")
            if action == "question":
                self.pending_questions[token] = {
                    "user_id": user,
                    "message": message,
                    "timestamp": datetime.now()
                }
            return True
        except Exception as e:
            logger.error(f"Error sending to admin chat {self.admin_chat}: {e}")
            await self.send_message(user, "chat_unavailable")
            return False

    def get_ai_response(self, user, message):
        if user not in self.contexts:
            self.contexts[user] = []
        self.contexts[user].append({"role": "user", "content": message})
        self.contexts[user] = self.contexts[user][-5:]
        prompt = self.prompt.format(rules=self.rules)
        messages = [
            {"role": "system", "content": prompt},
            {"role": "system", "content": f"–ü—Ä–∞–≤–∏–ª–∞ CandyxPE:\n{self.rules}"}
        ] + self.contexts[user]
        try:
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                max_tokens=500,
                temperature=0.7,
                timeout=10
            )
            if isinstance(response, str) and response.strip():
                cleaned_response = response.replace('*', '')
                self.contexts[user].append({"role": "assistant", "content": cleaned_response})
                return cleaned_response[:4090] + "..." if len(cleaned_response) > 4096 else cleaned_response
            logger.error("AI error: empty or invalid response")
            return self.MESSAGES["error"]
        except Exception as e:
            logger.error(f"AI error: {e}")
            return self.MESSAGES["error"]

    async def process_command(self, user, cmd, message):
        async def execute_command(action, success_message, keyboard_mode, condition=True):
            if condition:
                if action:
                    await action()
                if success_message:
                    await self.send_message(user, success_message, self.get_keyboard(keyboard_mode, user))
            else:
                await self.send_message(user, "admin_denied", self.get_keyboard("admin", user))

        commands = {
            "ai_agent": lambda: execute_command(lambda: self.async_action(lambda: self.ai_users.add(user)), "ai_on", "ai", True),
            "ask_question": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "question"})), "ask_question", "action", True),
            "report_staff": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "staff"})), "report_staff", "action", True),
            "report_bug": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "bug"})), "report_bug", "action", True),
            "end_ai": lambda: execute_command(lambda: self.async_action(lambda: (self.ai_users.discard(user), self.actions.pop(user, None), self.contexts.pop(user, None))), "ai_off", "main", True),
            "cancel": lambda: execute_command(lambda: self.async_action(lambda: (self.actions.pop(user, None), self.ai_users.discard(user))), "cancel", "main", True),
            "admin_panel": lambda: execute_command(None, "admin_panel", "admin", str(user) in self.agents),
            "manage_agents": lambda: execute_command(None, "manage_agents", "manage_agents", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "ban_user": lambda: execute_command(None, "ban_user", "ban_user", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "broadcast": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "broadcast"})), "broadcast", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "add_agent": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "add_agent"})), "add_agent", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "remove_agent": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "remove_agent"})), "remove_agent", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "ban": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "ban"})), "ban", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "unban": lambda: execute_command(lambda: self.async_action(lambda: self.actions.update({user: "unban"})), "unban", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "getagents": lambda: execute_command(None, "get_agents", "manage_agents", str(user) in self.agents and self.agents[str(user)].get("role") == "manager"),
            "stats": lambda: execute_command(None, "stats", "admin", str(user) in self.agents),
            "version": lambda: execute_command(None, "version", "main", True),
            "response_menu": lambda: execute_command(None, "response_menu", "response", str(user) in self.agents),
            "list_questions": lambda: execute_command(lambda: self.list_pending_questions(user), None, "response", str(user) in self.agents),
            "answer_user": lambda: execute_command(lambda: self.show_questions_for_response(user), None, "response", str(user) in self.agents)
        }

        if cmd == "token":
            await self.handle_token(user, message.text)
        else:
            await commands.get(cmd, lambda: self.send_message(user, "unknown", self.get_keyboard("main", user)))()

    async def handle_token(self, user, text):
        try:
            _, token = text.split(maxsplit=1)
            if token in self.tokens:
                if self.tokens[token].get("used"):
                    await self.send_message(user, "token_already_used", self.get_keyboard("main", user))
                else:
                    role = self.tokens[token]["role"]
                    self.agents[str(user)] = {"role": role}
                    self.tokens[token]["used"] = True
                    self.tokens[token]["user_id"] = user
                    self.save_file('candyxpe_agents.json', self.agents)
                    self.save_file('tokens.json', self.tokens)
                    await self.send_message(user, "token_success", self.get_keyboard("main", user), {"role": role.capitalize()})
                    logger.info(f"User {user} authorized as {role} with token {token}")
            else:
                await self.send_message(user, "token_invalid", self.get_keyboard("main", user))
        except ValueError:
            await self.send_message(user, "invalid_format", self.get_keyboard("main", user), {"text": "/token <—Ç–æ–∫–µ–Ω>", "example": "/token abc123"})

    async def list_pending_questions(self, user_id):
        if not self.pending_questions:
            await self.send_message(user_id, "no_pending_questions", self.get_keyboard("response", user_id))
            return
        questions_list = "\n".join(
            [f"‚óæ –¢–æ–∫–µ–Ω: {token[:8]}... | ID: {data['user_id']} | –í–æ–ø—Ä–æ—Å: {data['message'][:50]}... | –í—Ä–µ–º—è: {data['timestamp'].strftime('%H:%M:%S')}" 
             for token, data in self.pending_questions.items()]
        )
        await self.send_message(user_id, f"‚ñ∏ –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n{questions_list}", self.get_keyboard("response", user_id))

    async def show_questions_for_response(self, user_id):
        if not self.pending_questions:
            await self.send_message(user_id, "no_pending_questions", self.get_keyboard("response", user_id))
            return
        await self.send_message(user_id, "select_question", await self.get_question_keyboard())

    async def async_action(self, action):
        await asyncio.sleep(0)
        action()

    async def process_action(self, user, action, text):
        if action in ["staff", "bug"]:
            success = await self.send_admin(user, text, action)
            await self.send_message(user, f"report_{action}_sent" if success else f"report_{action}_failed", self.get_keyboard("main", user))
            self.actions.pop(user, None)
        elif action == "question":
            token = str(uuid.uuid4())
            success = await self.send_admin(user, text, "question", token)
            await self.send_message(user, "question_sent" if success else "question_failed", self.get_keyboard("main", user), {"token": token})
            self.actions.pop(user, None)
        elif action == "broadcast":
            if str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]:
                if len(text) > 4096:
                    await self.send_message(user, "message_too_long", self.get_keyboard("admin", user))
                else:
                    sent_count = 0
                    for uid in self.stats["users"]:
                        if int(uid) not in self.banned:
                            await self.send_message(int(uid), f"üì¢ –û–ü–û–í–ï–©–ï–ù–ò–ï:\n{text}", self.get_keyboard("main", int(uid)))
                            sent_count += 1
                    await self.send_admin(user, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", "broadcast")
                    await self.send_message(user, "broadcast_sent", self.get_keyboard("admin", user))
            self.actions.pop(user, None)
        elif action == "add_agent":
            try:
                agent_id, role = text.split()
                if role not in ["agent", "admin", "manager"]:
                    raise ValueError
                agent_id = int(agent_id)
                if agent_id == user:
                    await self.send_message(user, "self_agent", self.get_keyboard("manage_agents", user))
                elif str(agent_id) in self.agents:
                    await self.send_message(user, "already_agent", self.get_keyboard("manage_agents", user), {"agent_id": agent_id})
                else:
                    self.agents[str(agent_id)] = {"role": role}
                    self.save_file('candyxpe_agents.json', self.agents)
                    await self.send_message(user, "agent_added", self.get_keyboard("admin", user), {"role": role.capitalize(), "agent_id": agent_id})
                    await self.send_admin(user, f"{role.capitalize()} @{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.", "add_agent")
            except ValueError:
                await self.send_message(user, "invalid_format", self.get_keyboard("action", user), {"text": "<ID> <agent/admin/manager>", "example": "123456 agent"})
            self.actions.pop(user, None)
        elif action == "remove_agent":
            try:
                agent_id = int(text)
                if agent_id == user:
                    await self.send_message(user, "self_remove", self.get_keyboard("manage_agents", user))
                elif str(agent_id) in self.agents:
                    role = self.agents[str(agent_id)]["role"]
                    del self.agents[str(agent_id)]
                    self.save_file('candyxpe_agents.json', self.agents)
                    await self.send_message(user, "agent_removed", self.get_keyboard("admin", user), {"role": role.capitalize(), "agent_id": agent_id})
                    await self.send_admin(user, f"{role.capitalize()} @{agent_id} —Å–Ω—è—Ç.", "remove_agent")
                else:
                    await self.send_message(user, "not_agent", self.get_keyboard("manage_agents", user), {"agent_id": agent_id})
            except ValueError:
                await self.send_message(user, "invalid_id", self.get_keyboard("action", user))
            self.actions.pop(user, None)
        elif action == "ban":
            try:
                target_id, hours = map(int, text.split())
                if target_id == user:
                    await self.send_message(user, "self_ban", self.get_keyboard("ban_user", user))
                elif str(target_id) in self.agents:
                    await self.send_message(user, "agent_ban", self.get_keyboard("ban_user", user))
                else:
                    self.banned[target_id] = datetime.now() + timedelta(hours=hours)
                    await self.send_message(user, "banned", self.get_keyboard("ban_user", user), {"target_id": target_id, "hours": hours})
                    await self.send_message(target_id, "banned_notify", self.get_keyboard("main", target_id), {"hours": hours})
                    await self.send_admin(user, f"@{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.", "ban")
            except ValueError:
                await self.send_message(user, "invalid_format", self.get_keyboard("action", user), {"text": "<ID> <hours>", "example": "123456 24"})
            self.actions.pop(user, None)
        elif action == "unban":
            try:
                target_id = int(text)
                if target_id in self.banned:
                    del self.banned[target_id]
                    await self.send_message(user, "unbanned", self.get_keyboard("ban_user", user), {"target_id": target_id})
                    await self.send_message(target_id, "unbanned_notify", self.get_keyboard("main", target_id))
                    await self.send_admin(user, f"@{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", "unban")
                else:
                    await self.send_message(user, "not_banned", self.get_keyboard("ban_user", user), {"target_id": target_id})
            except ValueError:
                await self.send_message(user, "invalid_id", self.get_keyboard("action", user))
            self.actions.pop(user, None)
        elif action == "answer_user":
            if str(user) in self.agents:
                token = self.actions[user].get("current_token")
                if token and token in self.pending_questions:
                    target_id = self.pending_questions[token]["user_id"]
                    await self.send_message(target_id, f"üì¢ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–¢–æ–∫–µ–Ω: {token}):\n{text}", self.get_keyboard("main", target_id))
                    await self.send_message(user, "response_sent", self.get_keyboard("response", user), {"user_id": target_id})
                    del self.pending_questions[token]
                    logger.info(f"Agent {user} responded to user {target_id} (token: {token}): {text[:50]}")
                else:
                    await self.send_message(user, "invalid_id", self.get_keyboard("response", user))
            self.actions.pop(user, None)

    def check_spam(self, user):
        now = time.time()
        self.spam[user] = [t for t in self.spam.get(user, []) if now - t < 60]
        if len(self.spam[user]) >= 25:
            logger.warning(f"User {user} exceeded message limit (spam)")
            return False
        self.spam[user].append(now)
        return True

    def setup_handlers(self):
        @self.dp.message(CommandStart())
        async def start_command(message: types.Message):
            await self.send_message(message.from_user.id, "welcome", self.get_keyboard("main", message.from_user.id))

        @self.dp.callback_query()
        async def handle_callback(callback: types.CallbackQuery):
            user_id = callback.from_user.id
            if not str(user_id) in self.agents:
                await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            if callback.data.startswith("answer_"):
                token = callback.data.split("_")[1]
                if token in self.pending_questions:
                    self.actions[user_id] = {"action": "answer_user", "current_token": token}
                    question = self.pending_questions[token]["message"]
                    await self.send_message(user_id, "enter_response", self.get_keyboard("action", user_id), {"token": token, "question": question})
                else:
                    await self.send_message(user_id, "no_pending_questions", self.get_keyboard("response", user_id))
            elif callback.data == "back_to_response":
                await self.send_message(user_id, "response_menu", self.get_keyboard("response", user_id))
            await callback.answer()

        @self.dp.message()
        async def handle_message(message: types.Message):
            user = message.from_user.id
            text = message.text.strip() if message.text else ""
            logger.debug(f"Processing message from {user}, text: {text}")
            self.banned = {uid: expiry for uid, expiry in self.banned.items() if datetime.now() <= expiry}
            if user in self.banned:
                await self.send_message(user, "banned_user", self.get_keyboard("main", user))
                return
            if not self.check_spam(user):
                await self.send_message(user, "error", self.get_keyboard("main", user))
                return
            self.stats["users"].add(user)
            self.stats["messages"] += 1

            button_commands = {
                "ü§ñÔ∏è –ü–û–î–î–ï–†–ñ–ö–ê –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê": "ai_agent",
                "‚ùì –ó–∞–¥–∞—Ç—å –í–û–ü–†–û–°": "ask_question",
                "üìù –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ": "report_staff",
                "‚ö†Ô∏è –í–û–ó–ù–ò–ö–õ–ê –ù–ï–ü–û–õ–ê–î–ö–ê": "report_bug",
                "üîÑ –ó–ê–í–ï–†–®–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£": "end_ai",
                "üîÑ –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –û–ü–ï–†–ê–¶–ò–Æ": "cancel",
                "üõ† –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø": "admin_panel",
                "üßë‚Äçüè´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–¢–ê–¢–û–ú": "manage_agents",
                "‚õè –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø": "ban_user",
                "üì¢ –ú–ê–°–°–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï": "broadcast",
                "üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê": "add_agent",
                "üóë –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê": "remove_agent",
                "üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü": "ban",
                "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê": "unban",
                "üì¨ –ú–ï–ù–Æ –û–¢–í–ï–¢–û–í": "response_menu",
                "üì¨ –û–¢–í–ï–¢–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ": "answer_user",
                "üìã –°–ü–ò–°–û–ö –í–û–ü–†–û–°–û–í": "list_questions",
                "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ": "cancel"
            }

            if text.startswith("/"):
                await self.process_command(user, text[1:].split()[0], message)
                return
            if text in button_commands:
                await self.process_command(user, button_commands[text], message)
                return
            if not text:
                await self.send_message(user, "no_input", self.get_keyboard("main", user))
                return
            if user in self.actions:
                await self.process_action(user, self.actions[user]["action"] if isinstance(self.actions[user], dict) else self.actions[user], text)
                return
            if user in self.ai_users:
                if text.lower() in {"–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø"}:
                    await self.process_command(user, "end_ai", message)
                else:
                    response = self.get_ai_response(user, text)
                    await self.send_message(user, response, self.get_keyboard("ai", user))
                return
            if text.lower() in {"–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–æ–¥–≤–µ—Ç"}:
                await self.send_message(user, "welcome", self.get_keyboard("main", user))
            else:
                await self.send_message(user, "unknown", self.get_keyboard("main", user))

    async def run(self):
        print(f"\nüöñ CandyxPE v{self.VERSION} {self.CODE_NAME}\n{'-' * 40}")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ CandyxPE by vatkovskydev –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º dsuslov67\n{'-' * 40}\n")
        logger.info("Bot started")
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    TELEGRAM_TOKEN = "7738965237:AAGIkAz01LRaTtPII8LPxyUoYD0ucy5IgB4"
    ADMIN_CHAT_ID = -1002739303737
    bot = SupportBot(TELEGRAM_TOKEN, ADMIN_CHAT_ID)
    asyncio.run(bot.run())
